name: Build and Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string

concurrency:
  group: build-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-translation:
    name: Check translation keys
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Run translation key check
        run: node apps/web/src/locales/checkTranslations.js

  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'pnpm'

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            apps/web/.next/cache
            node_modules/.cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate database client and build shared
        run: |
          pnpm run build:shared

  lint-shared:
    name: Lint Shared Package
    needs: [setup, check-translation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate database client and build shared
        run: pnpm run build:shared
      - name: Lint shared package
        run: pnpm run --filter @lukittu/shared lint

  lint-web:
    name: Lint Web App
    needs: [setup, check-translation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint web application
        run: pnpm run --filter lukittu-web lint

  lint-bot:
    name: Lint Bot App
    needs: [setup, check-translation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint bot application
        run: pnpm run --filter lukittu-bot lint

  test-web:
    name: Test Web App
    needs: [setup, check-translation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate database client and build shared
        run: pnpm run build:shared
      - name: Run web tests
        run: pnpm run --filter lukittu-web test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-test-results
          path: apps/web/coverage/
          retention-days: 7

  test-shared:
    name: Test Shared Package
    needs: [setup, check-translation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate database client and build shared
        run: pnpm run build:shared
      - name: Run shared package tests
        run: pnpm run --filter @lukittu/shared test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: shared-test-results
          path: packages/shared/coverage/
          retention-days: 7

  build-web:
    needs: [lint-web, test-web, test-shared, lint-shared]
    name: Build Web Docker Image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Extract tag name
        id: extract_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "TAG=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure environment
        run: |
          cat << EOF > apps/web/.env
          NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
          NEXT_PUBLIC_GOOGLE_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_GOOGLE_REDIRECT_URI }}
          NEXT_PUBLIC_GITHUB_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GITHUB_CLIENT_ID }}
          NEXT_PUBLIC_GITHUB_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_GITHUB_REDIRECT_URI }}
          NEXT_PUBLIC_DISCORD_CLIENT_ID=${{ secrets.NEXT_PUBLIC_DISCORD_CLIENT_ID }}
          NEXT_PUBLIC_DISCORD_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_DISCORD_REDIRECT_URI }}
          EOF

      - name: Login to Docker Registry
        if: steps.extract_tag.outputs.IS_TAG == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push web docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: ${{ steps.extract_tag.outputs.IS_TAG == 'true' }}
          tags: |
            ${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE }}:${{ steps.extract_tag.outputs.TAG }}
            ${{ steps.extract_tag.outputs.IS_TAG == 'true' && format('{0}/{1}:latest', secrets.REGISTRY_USERNAME, secrets.IMAGE) || '' }}
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE }}:latest
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64
          provenance: false

  build-bot:
    needs: [lint-bot, test-shared, lint-shared]
    name: Build Bot Docker Image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Extract tag name
        id: extract_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "TAG=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Registry
        if: steps.extract_tag.outputs.IS_TAG == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push bot docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/bot/Dockerfile
          push: ${{ steps.extract_tag.outputs.IS_TAG == 'true' }}
          tags: |
            ${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE_BOT }}:${{ steps.extract_tag.outputs.TAG }}
            ${{ steps.extract_tag.outputs.IS_TAG == 'true' && format('{0}/{1}:latest', secrets.REGISTRY_USERNAME, secrets.IMAGE_BOT) || '' }}
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE_BOT }}:latest
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64
          provenance: false

  deploy:
    name: Deploy to VM
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Extract tag name
        id: extract_tag
        run: |
          if [ "${{ github.event.inputs.tag }}" != "" ]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Exit on any error
            set -e

            cd lukittu

            echo "📥 Updating repository..."
            git fetch --all
            git checkout ${{ steps.extract_tag.outputs.TAG }}

            echo "🔐 Logging into Docker registry..."
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}

            echo "📦 Pulling images for tag ${{ steps.extract_tag.outputs.TAG }}..."
            docker pull ${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE }}:${{ steps.extract_tag.outputs.TAG }}
            docker pull ${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE_BOT }}:${{ steps.extract_tag.outputs.TAG }}

            echo "🔄 Restarting containers with tag ${{ steps.extract_tag.outputs.TAG }}..."
            export LUKITTU_TAG=${{ steps.extract_tag.outputs.TAG }}
            docker compose -f docker/docker-compose-prod.yml down
            docker compose -f docker/docker-compose-prod.yml up -d

            # Wait for application to be ready
            echo "⏳ Waiting for application to start..."
            for i in {1..12}; do
              if curl -s http://localhost:3069/api/health > /dev/null; then
                echo "✅ Application is ready!"
                
                echo "📝 Running migrations..."
                cd docker && docker compose -f docker-compose-migrate.yml up -d
                exit 0
              fi
              echo "Attempt $i/12: Application not ready, waiting..."
              sleep 5
            done

            echo "❌ Application failed to start"
            docker compose -f docker/docker-compose-prod.yml logs
            exit 1
