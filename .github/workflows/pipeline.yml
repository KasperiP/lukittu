name: Build and Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: build-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-translation:
    name: Check translation keys
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Run translation key check
        run: node src/locales/checkTranslations.js

  lint:
    name: Lint
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

  test:
    name: Run Tests
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - uses: pnpm/action-setup@v2
        with:
          version: 'latest'

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            .next/cache
          key: ${{ runner.os }}-nextjs-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-pnpm-
            ${{ runner.os }}-

      - run: pnpm install --frozen-lockfile
      - run: pnpm test

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: coverage/
          retention-days: 7

  build:
    needs: [check-translation, test, lint]
    name: Build Docker Image
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Configure environment
        run: |
          cat << EOF > .env
          NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
          NEXT_PUBLIC_GOOGLE_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_GOOGLE_REDIRECT_URI }}
          NEXT_PUBLIC_GITHUB_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GITHUB_CLIENT_ID }}
          NEXT_PUBLIC_GITHUB_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_GITHUB_REDIRECT_URI }}
          EOF

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    name: Deploy to VM
    timeout-minutes: 5
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Exit on any error
            set -e

            cd lukittu

            echo "üì• Updating repository..."
            git fetch --all
            git reset --hard origin/main

            echo "üîê Logging into Docker registry..."
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}

            echo "üì¶ Pulling latest image..."
            docker pull ${{ secrets.REGISTRY_USERNAME }}/${{ secrets.IMAGE }}

            echo "üîÑ Restarting containers..."
            docker compose -f docker-compose-prod.yml down
            docker compose -f docker-compose-prod.yml up -d

            # Wait for application to be ready
            echo "‚è≥ Waiting for application to start..."
            for i in {1..12}; do
              if curl -s http://localhost:3000/api/health > /dev/null; then
                echo "‚úÖ Application is ready!"
                
                echo "üìù Running migrations..."
                docker compose -f docker-compose-migrate.yml up -d
                exit 0
              fi
              echo "Attempt $i/12: Application not ready, waiting..."
              sleep 5
            done

            echo "‚ùå Application failed to start"
            docker compose -f docker-compose-prod.yml logs
            exit 1
