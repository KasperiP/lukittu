// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  emailVerified    Boolean    @default(false)
  fullName         String
  passwordHash     String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  provider         Provider   @default(CREDENTIALS)
  sessions         Session[]
  createdProducts  Product[]
  ownedTeams       Team[]     @relation("TeamOwner")
  teams            Team[]     @relation("TeamUsers")
  createdLicenses  License[]
  createdCustomers Customer[]
}

model Session {
  id        String   @id @default(uuid())
  sessionId String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  country   String?
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Team {
  id            String       @id @default(uuid())
  name          String
  ownerId       String
  owner         User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  users         User[]       @relation("TeamUsers")
  products      Product[]
  licenses      License[]
  customers     Customer[]
  requestLogs   RequestLog[]
  publicKeyRsa  String
  privateKeyRsa String
  deletedAt     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Product {
  id              String       @id @default(uuid())
  name            String
  url             String?
  metadata        Json
  teamId          String
  team            Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdByUserId String?
  createdBy       User?        @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  licenses        License[]
  requestLogs     RequestLog[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Customer {
  id              String       @id @default(uuid())
  email           String?
  fullName        String?
  metadata        Json
  teamId          String
  team            Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  licenses        License[]
  requestLogs     RequestLog[]
  createdByUserId String?
  createdBy       User?        @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([email, teamId])
}

model License {
  id               String                 @id @default(uuid())
  licenseKey       String
  licenseKeyLookup String
  ipLimit          Int?
  metadata         Json
  expirationType   LicenseExpirationType  @default(NEVER)
  expirationStart  LicenseExpirationStart @default(CREATION)
  expirationDate   DateTime?
  expirationDays   Int?
  suspended        Boolean                @default(false)
  teamId           String
  team             Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  products         Product[]
  customers        Customer[]
  createdByUserId  String?
  createdBy        User?                  @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  requestLogs      RequestLog[]

  @@unique([teamId, licenseKeyLookup])
}

model RequestLog {
  id           String        @id @default(uuid())
  responseTime Int
  ipAddress    String?
  country      String?
  status       RequestStatus
  teamId       String
  team         Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  licenseId    String?
  license      License?      @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  productId    String?
  product      Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
  customerId   String?
  customer     Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
  createdAt    DateTime      @default(now())
}

enum Provider {
  CREDENTIALS
  GOOGLE
}

enum LicenseExpirationType {
  NEVER
  DATE
  DURATION
}

enum LicenseExpirationStart {
  ACTIVATION
  CREATION
}

enum RequestStatus {
  INTERNAL_SERVER_ERROR
  BAD_REQUEST
  LICENSE_NOT_FOUND
  VALID
  IP_LIMIT_REACHED
  PRODUCT_NOT_FOUND
  CUSTOMER_NOT_FOUND
  LICENSE_EXPIRED
  LICENSE_SUSPENDED
}
