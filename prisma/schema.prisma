// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  email              String       @unique
  emailVerified      Boolean      @default(false)
  fullName           String
  passwordHash       String?
  imageUrl           String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  provider           Provider     @default(CREDENTIALS)
  sessions           Session[]
  createdProducts    Product[]
  auditLogs          AuditLog[]
  ownedTeams         Team[]       @relation("TeamOwner")
  teams              Team[]       @relation("TeamUsers")
  createdApiKeys     ApiKey[]
  createdLicenses    License[]
  createdCustomers   Customer[]
  createdInvitations Invitation[]
}

model Session {
  id        String   @id @default(uuid())
  sessionId String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  country   String?
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Team {
  id          String       @id @default(uuid())
  name        String
  ownerId     String
  imageUrl    String?
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  users       User[]       @relation("TeamUsers")
  products    Product[]
  licenses    License[]
  customers   Customer[]
  requestLogs RequestLog[]
  auditLogs   AuditLog[]
  invitations Invitation[]
  apiKeys     ApiKey[]
  settings    Settings?
  keyPair     KeyPair?
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Settings {
  id               String   @id @default(uuid())
  teamId           String   @unique
  team             Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  heartbeatTimeout Int      @default(60)
  strictCustomers  Boolean  @default(false)
  strictProducts   Boolean  @default(false)
  emailMessage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model KeyPair {
  id         String   @id @default(uuid())
  publicKey  String
  privateKey String
  teamId     String   @unique
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model ApiKey {
  id              String   @id @default(uuid())
  key             String   @unique
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdByUserId String?
  createdBy       User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())

  @@index([teamId])
}

model Invitation {
  id              String   @id @default(uuid())
  email           String
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  accepted        Boolean  @default(false)
  createdByUserId String?
  createdBy       User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())
}

model Product {
  id              String       @id @default(uuid())
  name            String
  url             String?
  metadata        Json
  teamId          String
  team            Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdByUserId String?
  createdBy       User?        @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  licenses        License[]
  requestLogs     RequestLog[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([teamId])
}

model Customer {
  id              String       @id @default(uuid())
  email           String?
  fullName        String?
  metadata        Json
  teamId          String
  team            Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  licenses        License[]
  requestLogs     RequestLog[]
  createdByUserId String?
  createdBy       User?        @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([email, teamId])
}

model License {
  id               String                 @id @default(uuid())
  licenseKey       String
  licenseKeyLookup String
  ipLimit          Int?
  metadata         Json
  expirationType   LicenseExpirationType  @default(NEVER)
  expirationStart  LicenseExpirationStart @default(CREATION)
  expirationDate   DateTime?
  expirationDays   Int?
  seats            Int?
  suspended        Boolean                @default(false)
  teamId           String
  team             Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  products         Product[]
  customers        Customer[]
  createdByUserId  String?
  createdBy        User?                  @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  requestLogs      RequestLog[]
  heartbeats       Heartbeat[]

  @@unique([teamId, licenseKeyLookup])
}

model Heartbeat {
  id               String   @id @default(uuid())
  licenseId        String
  license          License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  ipAddress        String?
  clientIdentifier String
  lastBeatAt       DateTime @default(now())
  createdAt        DateTime @default(now())

  @@unique([licenseId, clientIdentifier])
}

model AuditLog {
  id           String             @id @default(uuid())
  ipAddress    String?
  longitude    Float?
  latitude     Float?
  userAgent    String?
  country      String?
  requestBody  Json?
  responseBody Json?
  userId       String?
  version      String
  user         User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  targetId     String
  targetType   AuditLogTargetType
  teamId       String
  team         Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  action       AuditLogAction
  createdAt    DateTime           @default(now())

  @@index([teamId, createdAt])
}

model RequestLog {
  id           String        @id @default(uuid())
  responseTime Int
  ipAddress    String?
  longitude    Float?
  latitude     Float?
  country      String?
  status       RequestStatus
  statusCode   Int
  version      String
  userAgent    String?
  origin       String?
  path         String
  method       RequestMethod
  requestBody  Json?
  responseBody Json?
  teamId       String
  team         Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  licenseId    String?
  license      License?      @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  productId    String?
  product      Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
  customerId   String?
  customer     Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
  createdAt    DateTime      @default(now())

  @@index([teamId, createdAt])
}

enum RequestMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum AuditLogAction {
  LEAVE_TEAM
  CREATE_TEAM
  UPDATE_TEAM
  DELETE_TEAM
  TRANSFER_TEAM_OWNERSHIP
  CREATE_LICENSE
  UPDATE_LICENSE
  DELETE_LICENSE
  CREATE_CUSTOMER
  UPDATE_CUSTOMER
  DELETE_CUSTOMER
  CREATE_PRODUCT
  UPDATE_PRODUCT
  DELETE_PRODUCT
  INVITE_MEMBER
  KICK_MEMBER
  CANCEL_INVITATION
  ACCEPT_INVITATION
  RESET_PUBLIC_KEY
  UPDATE_TEAM_SETTINGS
}

enum AuditLogTargetType {
  LICENSE
  CUSTOMER
  PRODUCT
  TEAM
}

enum Provider {
  CREDENTIALS
  GOOGLE
  GITHUB
}

enum LicenseExpirationType {
  NEVER
  DATE
  DURATION
}

enum LicenseExpirationStart {
  ACTIVATION
  CREATION
}

enum RequestStatus {
  INTERNAL_SERVER_ERROR
  BAD_REQUEST
  LICENSE_NOT_FOUND
  VALID
  IP_LIMIT_REACHED
  PRODUCT_NOT_FOUND
  CUSTOMER_NOT_FOUND
  LICENSE_EXPIRED
  LICENSE_SUSPENDED
  MAXIMUM_CONCURRENT_SEATS
  TEAM_NOT_FOUND
  RATE_LIMIT
}
