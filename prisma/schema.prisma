// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  emailVerified    Boolean    @default(false)
  fullName         String
  passwordHash     String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  provider         Provider   @default(CREDENTIALS)
  sessions         Session[]
  createdProducts  Product[]
  ownedTeams       Team[]     @relation("TeamOwner")
  teams            Team[]     @relation("TeamUsers")
  createdLicenses  License[]
  createdCustomers Customer[]
}

model Session {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  country   String?
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Team {
  id        Int        @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     User       @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  users     User[]     @relation("TeamUsers")
  products  Product[]
  licenses  License[]
  customers Customer[]
  deletedAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  url             String?
  teamId          Int
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdByUserId Int?
  createdBy       User?     @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  licenses        License[]
  deletedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Customer {
  id              Int       @id @default(autoincrement())
  email           String?
  firstName       String?
  lastName        String?
  description     String?
  teamId          Int
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  licenses        License[]
  createdByUserId Int?
  createdBy       User?     @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([email, teamId])
}

model License {
  id              Int                    @id @default(autoincrement())
  licenseKey      String
  ipLimit         Int?
  expirationType  LicenseExpirationType  @default(NEVER)
  expirationStart LicenseExpirationStart @default(CREATION)
  expirationDate  DateTime?
  expirationDays  Int?
  suspended       Boolean                @default(false)
  teamId          Int
  team            Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  products        Product[]
  customerId      Int?
  customer        Customer?              @relation(fields: [customerId], references: [id], onDelete: SetNull)
  createdByUserId Int?
  createdBy       User?                  @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  requestLogs     RequestLog[]

  @@index([teamId, licenseKey])
}

model RequestLog {
  id        Int      @id @default(autoincrement())
  ipAddress String?
  licenseId Int
  license   License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum Provider {
  CREDENTIALS
  GOOGLE
}

enum LicenseExpirationType {
  NEVER
  DATE
  DURATION
}

enum LicenseExpirationStart {
  ACTIVATION
  CREATION
}
